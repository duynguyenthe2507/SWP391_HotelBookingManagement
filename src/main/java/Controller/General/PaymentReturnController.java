package Controller.General;

import Dao.BookingDao;
import Models.Booking;
import Utils.VnPayConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet(name = "PaymentReturnController", urlPatterns = {"/paymentReturn"})
public class PaymentReturnController extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(PaymentReturnController.class.getName());

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {

        Map<String, String> vnp_Params = new HashMap<>();
        for (Enumeration<String> params = request.getParameterNames(); params.hasMoreElements(); ) {
            String fieldName = params.nextElement();
            String fieldValue = request.getParameter(fieldName);
            if (fieldValue != null && fieldValue.length() > 0) {
                vnp_Params.put(fieldName, fieldValue);
            }
        }

        // L·∫•y SecureHash v√† lo·∫°i b·ªè kh·ªèi map ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng khi k√Ω l·∫°i
        String vnp_SecureHash = vnp_Params.remove("vnp_SecureHash");
        String computedHash = VnPayConfig.hashAllFields(vnp_Params);

        String txnRef = vnp_Params.get("vnp_TxnRef"); // bookingId
        String responseCode = vnp_Params.get("vnp_ResponseCode");

        LOGGER.log(Level.INFO, "[VNPay Return] txnRef={0}, responseCode={1}", new Object[]{txnRef, responseCode});

        String message;

        // 1Ô∏è‚É£ Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ch·ªØ k√Ω
        if (!computedHash.equals(vnp_SecureHash)) {
            LOGGER.warning("VNPay signature verification failed!");
            message = "‚ùó D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thay ƒë·ªïi trong qu√° tr√¨nh truy·ªÅn.";
            request.setAttribute("message", message);
            request.getRequestDispatcher("/pages/user/paymentResult.jsp").forward(request, response);
            return;
        }

        // 2Ô∏è‚É£ Ki·ªÉm tra txnRef h·ª£p l·ªá
        int bookingId;
        try {
            bookingId = Integer.parseInt(txnRef);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid bookingId from VNPay: {0}", txnRef);
            message = "Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng h·ª£p l·ªá.";
            request.setAttribute("message", message);
            request.getRequestDispatcher("/pages/user/paymentResult.jsp").forward(request, response);
            return;
        }

        // 3Ô∏è‚É£ T√¨m ƒë∆°n h√†ng trong DB
        BookingDao bookingDao = new BookingDao();
        Booking booking = bookingDao.getBookingById(bookingId);
        if (booking == null) {
            LOGGER.log(Level.WARNING, "Booking not found in database: {0}", bookingId);
            message = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong h·ªá th·ªëng.";
            request.setAttribute("message", message);
            request.getRequestDispatcher("/pages/user/paymentResult.jsp").forward(request, response);
            return;
        }

        // 4Ô∏è‚É£ X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n
        switch (responseCode) {
            case "00": // Th√†nh c√¥ng
                bookingDao.updateBookingStatus(bookingId, "PAID");
                message = "üéâ Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t ph√≤ng. M√£ ƒë∆°n h√†ng: " + bookingId;
                LOGGER.log(Level.INFO, "Payment success for booking #{0}", bookingId);
                break;

            case "24": // Ng∆∞·ªùi d√πng h·ªßy thanh to√°n
                bookingDao.updateBookingStatus(bookingId, "CANCELLED");
                message = "‚ö†Ô∏è B·∫°n ƒë√£ h·ªßy giao d·ªãch thanh to√°n. ƒê∆°n h√†ng #" + bookingId + " ch∆∞a ƒë∆∞·ª£c thanh to√°n.";
                LOGGER.log(Level.INFO, "Payment cancelled for booking #{0}", bookingId);
                break;

            default: // C√°c m√£ l·ªói kh√°c
                bookingDao.updateBookingStatus(bookingId, "FAILED");
                message = "‚ùå Giao d·ªãch th·∫•t b·∫°i (M√£ l·ªói: " + responseCode + "). M√£ ƒë∆°n h√†ng: " + bookingId;
                LOGGER.log(Level.WARNING, "Payment failed for booking #{0}, responseCode={1}",
                        new Object[]{bookingId, responseCode});
                break;
        }

        // 5Ô∏è‚É£ G·ª≠i k·∫øt qu·∫£ ra trang JSP
        request.setAttribute("message", message);
        request.setAttribute("bookingId", bookingId);
        request.setAttribute("responseCode", responseCode);
        request.getRequestDispatcher("/pages/user/paymentResult.jsp").forward(request, response);
    }
}
